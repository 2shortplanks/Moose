
=pod

=head1 NAME

Moose::Cookbook::Recipe4

=head1 SYNOPSIS
  
  package Address;
  use strict;
  use warnings;
  use Moose;
  
  use Locale::US;
  use Regexp::Common 'zip';
  
  my $STATES = Locale::US->new;
  
  subtype USState 
      => as Str
      => where {
          (exists $STATES->{code2state}{uc($_)} || exists $STATES->{state2code}{uc($_)})
      };
      
  subtype USZipCode 
      => as Value
      => where {
          /^$RE{zip}{US}{-extended => 'allow'}$/            
      };
  
  has 'street'   => (is => 'rw', isa => 'Str');
  has 'city'     => (is => 'rw', isa => 'Str');
  has 'state'    => (is => 'rw', isa => 'USState');
  has 'zip_code' => (is => 'rw', isa => 'USZipCode');   
  
  package Company;
  use strict;
  use warnings;
  use Moose;
  
  has 'name'      => (is => 'rw', isa => 'Str');
  has 'address'   => (is => 'rw', isa => 'Address'); 
  has 'employees' => (is => 'rw', isa => subtype ArrayRef => where { 
      ($_->isa('Employee') || return) for @$_; 1 
  });    
  
  sub BUILD {
      my ($self, $params) = @_;
      if ($params->{employees}) {
          foreach my $employee (@{$params->{employees}}) {
              $employee->company($self);
          }
      }
  }
  
  sub get_employee_count { scalar @{(shift)->employees} }
  
  package Person;
  use strict;
  use warnings;
  use Moose;
  
  has 'first_name'     => (is => 'rw', isa => 'Str');
  has 'last_name'      => (is => 'rw', isa => 'Str');       
  has 'middle_initial' => (is => 'rw', isa => 'Str', predicate => 'has_middle_initial');  
  has 'address'        => (is => 'rw', isa => 'Address');
  
  sub full_name {
      my $self = shift;
      return $self->first_name . 
            ($self->has_middle_initial ? ' ' . $self->middle_initial . '. ' : ' ') .
             $self->last_name;
  }
    
  package Employee;
  use strict;
  use warnings;
  use Moose;  
  
  extends 'Person';
  
  has 'title'   => (is => 'rw', isa => 'Str');
  has 'company' => (is => 'rw', isa => 'Company', weak_ref => 1);  
  
  override 'full_name' => sub {
      my $self = shift;
      super() . ', ' . $self->title
  };
  
=head1 DESCRIPTION

=head1 AUTHOR

Stevan Little E<lt>stevan@iinteractive.comE<gt>

=head1 COPYRIGHT AND LICENSE

Copyright 2006 by Infinity Interactive, Inc.

L<http://www.iinteractive.com>

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.

=cut